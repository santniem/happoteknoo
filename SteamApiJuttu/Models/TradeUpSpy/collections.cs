// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using asdasdasdasd;
//
//    var collections = Collections.FromJson(jsonString);

namespace SteamApiJuttu.Models.TradeUpSpy
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Collections
    {
        [JsonProperty("createTime")]
        public string CreateTime { get; set; }

        [JsonProperty("iconURL")]
        public Uri IconUrl { get; set; }

        [JsonProperty("idc")]
        public long Idc { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("price")]
        public double Price { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public enum TypeEnum { Case, Collection, StickerAutograph, StickerNormal, StickerTournament };

    public partial class Collections
    {
        public static List<Collections> FromJson(string json) => JsonConvert.DeserializeObject<List<Collections>>(json, TradeUpSpy.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Collections> self) => JsonConvert.SerializeObject(self, TradeUpSpy.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "case":
                    return TypeEnum.Case;
                case "collection":
                    return TypeEnum.Collection;
                case "sticker_autograph":
                    return TypeEnum.StickerAutograph;
                case "sticker_normal":
                    return TypeEnum.StickerNormal;
                case "sticker_tournament":
                    return TypeEnum.StickerTournament;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Case:
                    serializer.Serialize(writer, "case");
                    return;
                case TypeEnum.Collection:
                    serializer.Serialize(writer, "collection");
                    return;
                case TypeEnum.StickerAutograph:
                    serializer.Serialize(writer, "sticker_autograph");
                    return;
                case TypeEnum.StickerNormal:
                    serializer.Serialize(writer, "sticker_normal");
                    return;
                case TypeEnum.StickerTournament:
                    serializer.Serialize(writer, "sticker_tournament");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
