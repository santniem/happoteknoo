// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CSGO;
//
//    var priceHistory = PriceHistory.FromJson(jsonString);

namespace SteamApiJuttu.Models.Steam

{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PriceHistory
    {
        [JsonProperty("success")]
        public bool Success { get; set; }

        [JsonProperty("price_prefix")]
        public string PricePrefix { get; set; }

        [JsonProperty("price_suffix")]
        public string PriceSuffix { get; set; }

        [JsonProperty("prices")]
        public List<List<Price>> Prices { get; set; }
    }

    public partial struct Price
    {
        public double? Double;
        public string String;

        public static implicit operator Price(double Double) => new Price { Double = Double };
        public static implicit operator Price(string String) => new Price { String = String };
    }

    public partial class PriceHistory
    {
        public static PriceHistory FromJson(string json) => JsonConvert.DeserializeObject<PriceHistory>(json, Converter.Settings);
    }


    public partial class PriceHistory
    {
        public static CleanPriceModel FromJsonToCleaned(string json,string itemName)
        { 
            var obj = FromJson(json);
            var newPrice = new CleanPriceModel();
            newPrice.ItemName = itemName;
            newPrice.prices = new List<ItemPrice>();

            foreach (var item in obj.Prices)
            {
                var price = new ItemPrice(item[0].String, item[1].Double, long.Parse(item[2].String));

                newPrice.prices.Add(price);
            }
             return newPrice;
        }
    }

    public static class Serialize
    {
        public static string ToJson(this PriceHistory self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PriceConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PriceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Price) || t == typeof(Price?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Price { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Price { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Price");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Price)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Price");
        }

        public static readonly PriceConverter Singleton = new PriceConverter();
    }
}
